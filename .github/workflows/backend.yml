name: Backend

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

env:
  python-version: '3.10'
  working-directory: backend

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.working-directory }}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Restore pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ env.python-version }}-pip

      - name: Install linters
        run: |
          python -m pip install pylint

      - name: Run linters
        run: |
          pylint

  test:
    name: Run tests
    needs: [lint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.working-directory }}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}

      - name: Restore cached poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: ${{ runner.os }}-poetry

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Restore cached poetry virtualenv
        id: restore-cached-poetry-virtualenv
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-${{ env.python-version }}-virtualenv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-${{ env.python-version }}-virtualenv-

      - name: Install dependencies
        if: steps.restore-cached-poetry-virtualenv.outputs.cache-hit != 'true'
        working-directory: ${{ env.working-directory }}
        run: |
          poetry install --no-interaction --no-root

      - name: Run tests
        working-directory: ${{ env.working-directory }}
        run: |
          poetry run pytest --cov=app --cov=tests

  build:
    name: Build docker image
    needs: [test, lint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.working-directory }}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2

      - name: Build docker image
        run: |
          DOCKER_BUILDKIT=1 docker build .
